// This RPC is only used by the proprietary user-daemon and not the OSS one.

syntax = "proto3";

package telepresence.userdaemon;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "rpc/common/errors.proto";

option go_package = "github.com/telepresenceio/telepresence/rpc/v2/userdaemon";

service SystemA {
  // ReportAvailableServices sends a list of services that the daemon has access to.
  //
  // This RPC is only used by the proprietary user-daemon and not the OSS one.
  rpc ReportAvailableServices(stream AvailableServicesRequest) returns (google.protobuf.Empty);

  // GetNamespacesToWatch returns a list of namespaces that the user daemon should watch for workloads that can be
  // intercepted based on a list of namespaces that the user has access to.
  //
  // This RPC is only used by the proprietary user-daemon and not the OSS one.
  rpc GetNamespacesToWatch(NamespacesToWatchRequest) returns (NamespacesToWatchResponse);

  // ResolveInterceptIngressInfo gets the ingress information that the daemon should use to create the preview url
  // associated with an intercept
  rpc ResolveIngressInfo(IngressInfoRequest) returns (IngressInfoResponse);

  // ReportAvailableNamespaces
  rpc ReportAvailableNamespaces(stream AvailableNamespacesRequest) returns (google.protobuf.Empty);

  rpc ReportInterceptCreation(InterceptCreationResult) returns (google.protobuf.Empty);

  rpc GetInterceptDefinition(GetInterceptDefinitionRequest) returns (InterceptDefinition);
}

// AvailableServicesRequest contains a list of services that can be intercepted by the daemon
message AvailableServicesRequest {
  DaemonInfo daemon_info = 1;
  repeated Service available_services = 2;
}

// Service represents a Kubernetes service
message Service {
  // uid corresponds to the Kubernetes service's metadata.uid
  string uid = 1;
  string name = 2;
  string namespace = 3;
  repeated Port ports = 4;
  // Most of the time, we'll get only 1 workload, but since we want to be able to eventually inform the user about the
  // edge case of having multiple workloads behind a service without needing to update the pro daemon version, the
  // information should be provided as a list and the UI will display the error when it's ready to do so
  repeated Workload workloads = 5;
}

// Workload represents a Kubernetes workload (deployment, stateful set, replica set, ...)
message Workload {
  string uid = 1;
  string kind = 2;
  string name = 3;
}

message Port {
  string name = 1;
  int32 port = 2;
}

message NamespacesToWatchRequest {
  DaemonInfo daemon_info = 1;
  repeated Namespace namespaces = 2;
}

// IngressInfoRequest represents the intercept properties required to resolve ingress info
message IngressInfoRequest {
  // The service uid defined in the service's metadata
  string service_uid = 1;

  // The service name
  string service_name = 2;

  // The port name as defined in the service specs
  string service_port_identifier = 3;

  // The port value as defined in the service specs
  int32 service_port = 4;

  // The namespace in which the intercept takes place
  string namespace = 5;
}

// IngressInfoResponse represents the ingress properties required to configure a preview url
message IngressInfoResponse {
  // The layer-3 host
  string host = 1;

  // The layer-4 port
  int32 port = 2;

  // Whether or not to use TLS on the port
  bool use_tls = 3;

  // The layer-5 host
  string l5host = 4;
}

message NamespacesToWatchResponse {
  repeated Namespace namespaces = 1;
}

// AvailableNamespacesRequest contains a list of namespaces that can be intercepted by the daemon
message AvailableNamespacesRequest {
  DaemonInfo daemon_info = 1;
  repeated Namespace available_namespaces = 2;
}

message Namespace {
  string uid = 1;
  string name = 2;
  bool is_default = 3;
}

// DaemonIdentity identifies a daemon so that System A can reach it back
message DaemonInfo {
  string daemon_id = 1;
  string workstation_name = 2;
  string kube_context_name = 3;
  string session_id = 4;
}

message InterceptCreationResult {
  string telepresence_version = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp ended_at = 3;
  string intercept_name = 4;
  repeated string arguments = 5;
  string command_to_execute = 6;
  telepresence.common.InterceptError intercept_error = 7;
  string intercept_error_text = 8;
}

message GetInterceptDefinitionRequest {
  string name = 1;
}

message InterceptDefinition {
  string telepresence_version = 1;
  string intercept_name = 2;
  string arguments = 3;
  string command_to_execute = 4;
}
